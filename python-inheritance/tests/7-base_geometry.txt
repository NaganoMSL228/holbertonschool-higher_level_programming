The ``7-base_geometry`` module
======================
Using ``BaseGeometry``
-------------------
Importing the function from the module:
        >>> BaseGeometry = __import__("7-base_geometry").BaseGeometry
Checking for module docstring:
        >>> m = __import__("7-base_geometry").__doc__
        >>> len(m) > 1
        True
Checking for class docstring:
        >>> c = __import__("7-base_geometry").BaseGeometry.__doc__
        >>> len(c) > 1
        True
Checking for method docstring:
        >>> mod1 = __import__("7-base_geometry").BaseGeometry.area.__doc__
        >>> len(mod1) > 1
        True
        >>> mod2 = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
        >>> len(mod2) > 1
        True
# Test area method
        >>> bg = BaseGeometry()
        >>> bg.area()
        Traceback (most recent call last):
        Exception: area() is not implemented
# Test integer_validator method with valid inputs
        >>> bg.integer_validator("my_int", 12)
        >>> bg.integer_validator("width", 89)
# Test integer_validator method with non-integer input
        >>> bg.integer_validator("name", "John")
        Traceback (most recent call last):
        TypeError: name must be an integer
# Test integer_validator method with zero
        >>> bg.integer_validator("age", 0)
        Traceback (most recent call last):
        ValueError: age must be greater than 0
# Test integer_validator method with negative number
        >>> bg.integer_validator("distance", -4)
        Traceback (most recent call last):
        ValueError: distance must be greater than 0
# Additional tests
        >>> bg.integer_validator("float", 3.14)
        Traceback (most recent call last):
        TypeError: float must be an integer
        >>> bg.integer_validator("bool", True)
        Traceback (most recent call last):
        TypeError: bool must be an integer
        >>> bg.integer_validator("list", [1, 2, 3])
        Traceback (most recent call last):
        TypeError: list must be an integer
